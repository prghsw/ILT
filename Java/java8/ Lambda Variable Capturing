람다 표현식의 감싸진 범위에 의해 정의된 변수는 람다 표현식 내에서 접근 할 수 있다.
예를들어, 람다 표현식은 감싸진 클래스에 의해 정의된 인스턴스 혹은 정적 변수를 사용할 수 있다.
또한 람다 표현식은 람다 표현식을 둘러싼 클래스의 호출 인스턴스를 참조하는 (암묵적, 명시적 둘다) 접근 권한을 갖는다.
따라서, 람다 표현식은 둘러싼 클래스에 의해 정의된 고유 혹은 정적 변수를 얻거나 설정할 수 있고, 메소드를 호출 할 수 있다.
그러나, 람다 식이 둘러싼 범위의 로컬 변수를 사용 할때, 변수 캡처라는 특별한 상황이 생긴다.
이 경우에, 람다 식은 오직 실질적인 final 로컬 변수를 사용 해야한다.
실질적인 final 변수는 한번 할당한 후에 변경이 불가능한 변수 중 하나이다.
final로써 변수를 명시적으로 정의할 필요는 없다. 그러나 오류가 발생되진 않는다.
둘러싸인 범위의 로컬 변수가 람다 표현식에 의해 수정될 수 없다는 것을 이해하는 것이 중요하다.
그렇게 하면 실질적인 final 상태가 제거된다, 그러므로 캡처는 불법이다.

# 주요 포인트
1. 람다 표현식에 선언되지 않았지만, 사용되는 어떤 로컬 변수, 공식적인 파라미터 혹은 예외 파라미터든
final 혹은 실질적인 final로 선언되어야한다. 그렇지 않으면 사용될 때 컴파일 타임 오류가 발생한다.
2. 람다 바디에 선언되지 않았지만, 사용된 어떤 로컬 변수든, 람다 바디 이전에 분명히 할당되어야 한다.
그렇지 않으면 컴파일 타임 오류가 발생한다.
3. 변수에 대한 비슷한 규칙은 내부 클래스의 내부에도 적용된다. 실질적인 final 변수에 대한 제한이
캡처가 동시성 문제를 발생할 것 같은 동적으로 변하는 로컬 변수에 접근을 금지한다.
final 제한에 비해, 프로그래머의 사무 부담을 줄여 줍니다.
4. 실질적인 final 변수에 대한 제한은 표준 루프 변수를 포함하지만, 루프의 각 반복에 대해 개별로 취급되는
 향상된 for loop 변수는 아니다.

 interface MyFunction {
    int func(int n);
 }

 class GFG {
    public static void main(String[] args)
    {
        //  사용자 정의 로컬 변수
        int number = 10;

        MyFunction myLambda = (n) ->
        {
            //  숫자의 사용은 OK 숫자를 수정하지 않았습니다.
            int value = number + n;

            //  그러나, 다음은 불법입니다. 왜냐하면 number의 값을 변경을 시도하기때문입니다.

            //  number++;
            return value;
        };

        //  다음 라인은 에러를 발생할 것 입니다. 왜냐하면 숫자로의 실질적인 final 상태를 제거 되었기 때문에.
        //  number = 9;

        System.out.println("GFG!");
    }
 }

 ---
 interface MyInterface {
    void myFunction();
 }

 class GFG {
    // 사용자 정의 초기화
    int data = 170;

    public static void main(String[] args) {
        //  메인 메소드 내 클래스 object 생성
        GFG gfg = new GFG();

        //  메인 메소드 내 interface의 object 생성
        MyInterface intFace = () -> {
            System.out.println("Data : " + gfg.data);
            gfd.data += 500;
            System.out.println("Data : " + gfg.data);
        };

        intFace.myFunction();
        gfg.data += 200;
        System.out.println("Data : " + gfg.data);
    }
 }

 Data : 170
 Data : 670
 Data : 870

람다 식은 호출 클래스에서 인스턴스 변수를 사용하고 수정할 수 있다는 것을 강조하는 것이 중요합니다.
변수가 실질적인 final이 아니라면 둘러싼 범위의 로컬 변수를 사용할 수 없습니다.
