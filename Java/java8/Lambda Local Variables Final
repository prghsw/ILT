
# Lambda에서 사용되는 로컬변수가 Final 이어야하는 이유.

JLS (https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.27.2)
> 사실상 final 변수에 대한 제한은 동적으로 변경되는 local 변수에 접근을 금지한다.
동적으로 변경되는 local변수를 캡처하면 동시성 문제를 발생 할 수 있다.

# Lambda 캡처
- 람다 표현식은 외부 스코프에 정의된 변수를 사용 할 수 있다.
이러한 람다를 capturing lambdas이라고 한다.
정적 변수, 인스턴스 변수, 로컬 변수를 캡처 할 수 있다. 그러나 로컬 변수는 final 혹은 사실상 final이어야 한다.

- 현재 컴파일러는 fianl 키워드가 존재하지 않고, 참조가 변경되지 않고, 사실상 final이라는 것을 의미하는 상황이
 발생하는 곳을 인지 할 수 있다.

# Capturing lambdas에 Lcoal 변수
Supplier<Integer> incrementer(int start) {
    return () -> start++;
}

start는 local 변수이다.
그리고 람다 표현식에서 수정을 시도하고 있다.
컴파일이 되지 않는 기본적인 사유는 람다가 start의 변수를 캡처하고 있어서 이다. 즉, 복사를 했기 때문이다.

final로 변수를 강제 설정하면, lambda 내부에서 start 증가가 실직적으로 start 메소드 파라미터를 수정할 수 있다는 인상을
주는 것을 피할 수 있습니다.

그러나, 왜 복사를 해야 할까요? 우리의 메소드로 부터 람다를 반환하는 것에 주목합니다. 따라서,
람다는 start 메소드 파라미터가 가비지 수집될때까지 실행되지 않습니다.
자바는 이 메소드의 외부에서 실행하도록 람다를 위해 start를 복사해야합니다.

# Concurrency 문제
자바가 어떻게든 캡처된 변수에 연결된 상태로 유지되도록 허용했다고 상상해봅시다.

public void localVariableMultithreading() {
    boolean run = true;
    executor.execute(() -> {
        while (run) {
            //  do operation
        }
    });
    run = false;
}
"가시성"이라는 문제가 있습니다.
각 쓰레드는 자체 스택을 갖고 있으므로, while 루프가 다른 스택의 실행 변수에 대한 변경 사항을
확인하도록 하려면 어떻게 해야 하는가? 답은 synchronized block 혹은 volatile 키워드를 사용 하는 것을 수 있다.

그러나, java는 사실상 fianl 제한을 부과하므로, 이러한 복장성에 대한 고민을 할 필요가 없다.

# capturing lambdas내 static 혹은 instance 변수
start 변수를 인스턴스 변수로 변환하여 컴파일 할 수 있습니다.
private int start = 0;
Supplier<Integer> incrementer() {
    return () -> start;
}

왜 여기서 start 변수를 변경할 수 있는가?
간단히 말하자면, 멤버 변수가 저장되는 곳에 관한얘기다. 로컬 변수는 스택에 있지만, 멤버 변수는 힙에 있다.
힙 메모리에서 처리하기 때문에, 컴파일러는 람다가 start의 최신 값에 접근하는 것을 보장할 수 있다.

private volatile boolean run = true;

public void instanceVariableMultithreading() {
    executor.execute(() -> {
        while (run) {
            //  do operation
        }
    });

    run = false;
}
volatile키워드를 추가했기 때문에 run 변수는 또다른 쓰레드에서 실행될때에도 람다에 보여진다.
일반적으로 말하자면, 인스턴스 변수를 캡처할때, final 변수를 캡처 한다고 생각할 수 있습니다.
어쨋든, 특히 멀티쓰레딩 환경에서 컴파일러가 불평하지 않는다는 사실이 예방조치를 하지 않아도 된다는 뜻은 아니다.

#  Avoid Workarounds 해결방법은 피해라.
로컬 변수에 대한 제한을 피하기 위해, 누군가 로컬변수 값을 수정하기 위해 변수 홀더를 사용하는 것을 생각할 수 있다.

public int workaroundSingleThread() {
    int[] holder = new int[] { 2 };
    IntStream sums = IntStream
        .of(1, 2, 3)
        .map(val -> val + holder[0]);

    holder[0] = 0;
    return sums.sum();
}

각 변수 2를 더할 것이라고 생각할 것이다, 하지만 실제로는 lambda가 실행될때 최신 값을 사용하기 때문에 0을 더한다.

public void workaroundMultithreading() {
    int[] holder = new int[] { 2 };
    Runnable runnable = () -> System.out.println(IntStream
        .of(1, 2, 3)
        .map(val -> val + holder[0])
        .sum());

    new Thread(runnable).start();

    //  simulating some processing
    try {
        Thread.sleep(new Random().nextInt(3) * 1000L);
    } catch (InterruptedException e) {
        throw new RuntimeException(e);
    }

    holder[0] = 0;
}
작업을 처리하는 시간에 따라 다릅니다. 다른 쓰레드가 실행되기 전에 메소드의 실행이 종료될 만큼 시간이 짧다면,
6을 출력하고 또 다른 경우에는 12를 출력합니다.

일반적으로, 이러한 해결방법의 종류는 발생하기 쉬운 오류이고, 예기치 않은 값을 발생할 수 있다. 그러므로 항상 이러한 방법은
피해야 한다.
