
# interface default 와 static 메소드
java8 전에는 public abstract 메소드만 가질 수 있었다.
새로운 메소드의 구현을 생성하기 위한 모든 구현 클래스를 강제없이 기존 interface에 새로운 함수를 추가하는 것이 불가능 했다.
또한 구현된 인터페이스 메소드를 생성하는 것도 불가능 했다.

java8에서는 인터페이스에 static과 default 메소드를 갖을 수 있다.
인터페이스에 선언됨에도 불구하고, 정의된 동작을 가진다.

- static method
interface Vehicle {
    static String producer() {
        return "N&F Vehicles";
    }
}

static producer() 메소드는 인터페이스 내부를 통해서만 사용할 수 있다.
구현 클래스에 의해 오버라이드 할 수 없다.

String producer = Vehicle.producer();

- default method
default 메소드는 default keyword로 정의한다.
구현 클래스의 인스턴스를 통해 접근 할 수 있고, 오버라이드 할 수 있다.

interface Vehicle {
    default String getOverview() {
        return "ATV made by " + producer();
    }
}

인터페이스가 VehicleImpl 클래스에 의해 구현된다고 가정하자.
Vehicle vehicle = new VehicleImpl();
String overview = vehicle.getOverview();

# method references (메소드 참조)
method reference는 메소드를 호출하는 것에만 lambda 표현식을 대신하여 더욱 좋은 가독성과 짧은 코드로 사용된다.

method reference의 4가지 변형
1. static method를 위한 참조
static method에 대한 참조는 ContainingClass::methodName 구문이다.

> 람다 표현식으로 사용된 경우.
boolean isReal = list.stream().anyMatch(u -> User.isRealUser(u));
> method reference로 사용된 경우.
boolean isReal = list.stream().anyMatch(User::isRealUser);

2. 인스턴스 메소드에 대한 참조
instance method에 대한 참조는 containingInstance::methodName 구문이다.

User user = new User();
boolean isLegalname = list.stream().anyMatch(user::isLegalName);

3. 특정 유형의 object의 인스턴스 메소드에 대한 참조
ContainingType::methodName 구문이다.

long count = list.stream().filter(String::isEmpty).count();

4. 생성자에 대한 참조
생성자에 대한 참조는 ClassName::new 구문이다.

Stream<User> stream = list.stream().map(User::new);

# Optional<T>
java8 이전에는, 개발자들이 NullPointerException(NPE)를 던져질 가능성 때문에 참조하는 값을 신중하게 검증했다.
이러한 모든 검사에는 꽤 성가시고 에러가 발생하기 쉬운 보일러플레이트 코드가 필요했다.

java8 Optional<T> 클래스는 NPE가 발생할 가능성이 있는 상황을 처리하는데 도움이 된다.
type T의 object에 대한 컨테이너로써 동작한다. object의 값이 null이 아니면 object의 값을 반환 할 수 있다.
컨테이너 내부 값이 null 일때, NPE를 발생하는 대신 미리 정의된 동작을 발생시킬 수 있다.

1. Optional<T>의 생성
Optional 클래스의 인스턴스는 static method의 도움으로 생성할 수 있다.

> 비어있는 Optional
Optional<String> optional = Optional.empty();

> 값이 있는 Optional
String str = "value";
Optional<String> optional = Optional.of(str);

> 값이 있는 것 혹은 없는 Optional
Optional<String> optional = Optional.ofNullable(getString());

2. Optional<T> 사용
List<String> 가져온다고 가정하고, null인 경우 ArrayList<String>의 새로운 인스턴스를 대신 가져오자.

> java8 이전
List<String> list = getList();
List<String> listOpt = list != null ? list : new ArrayList<>();

> java8
List<String> listOpt = getList().orElseGet(() -> new ArrayList<>());

User object에 Adress type에 street field가 String으로 존재하는 object가 있고,
street field의 값이 null 이면 기본값 혹은 존재하면 street의 값을 반환한다고 가정하자.

> java8 이전
User user = getUser();
if (user != null) {
    Address address = user.getAddress();
    if (address != null) {
        String street = address.getStreet();
        if (street != null) {
            return street;
        }
    }
}
return "not specified";

> java8
Optional<User> user = Optional.ofNullable(getUser());
String result = user
    .map(User::getAddress)
    .map(Address::getStreet)
    .orElse("not specified");

getAddress()를 호출하여 Optional<Address>와 getStreet()에서 Optional<String>의 결과로 변환하기 위해
map() 메소드를 사용했다. 메소드가 null을 반환하면 map() 메소드는 empty Optional을 반환한다.

Optional<T>를 반환하는 getter를 상상해보자.
이 경우에는 map()대신 flatMap() 메소드를 사용할 수 있다.

Optional<OptionalUser> optionalUser = Optional.ofNullable(getOptionalUser());
String result = optionalUser
    .flatMap(OptionalUser::getAddress)
    .flatMap(OptionalAddress::getStreet)
    .orElse("not specified");

Optional은 NPE를 다른 exception으로 변경하는 경우 사용한다.

> java8 이전
String value = null;
String result = "";
try {
    result = value.toUpperCase();
} catch (NullPointerException exception) {
    throw new CustomException();
}

> java8
String value = null;
Optional<String> valueOpt = Optional.ofNullable(value);
String result = valueOpt.orElseThrow(CustomException::new).toUpperCase();


