# Spring AWS Lambda (https://docs.spring.io/spring-cloud-function/docs/current/reference/html/aws.html)

- AWS adapter는 Spring Cloud Function app을 사용하고 AWS Lambda에서 실행 할 수 있는 형태로 변환한다.

# AWS Lambda
- Spring Cloud Function 프레임워크의 목표 중 하나는 특정 환경에서 특정 방법으로 상호작용하기 위해
simple function application 을 사용 할 수 있도록 필요한 인프라 요소를 제공하기 위한 것이다.
simple function application(context 혹은 spring)은 Supplier, Function 혹은 Consumer 유형의 빈들을
포함하는 application 이다. 따라서, AWS에서 simple function bean이 AWS Lambda 환경에 어떻게든 인지되고
실행되어야 한다는 것을 의미 합니다.

@SpringBootApplication
public class FunctionConfiguration {
    public static void main(String[] args) {
        StringApplication.run(FunctionConfiguration.class, args);
    }

    @Bean
    public Function<String, String> uppercase() {
        return value -> value.toUpperCase();
    }
}

function bean을 갖은 Spring Boot application을 보여주고 있습니다.
단지 다른 boot app과 같다. 그러나 AWS Adapter 문맥상으로 완벽하게 유효한 AWS Lambda application이라는 것입니다.
다른 코드나 구성은 필요없다. 그냥 패키징하고 배포하면 됩니다.

> 샘플 코드
https://github.com/spring-cloud/spring-cloud-function/tree/master/spring-cloud-function-samples/function-sample-aws

# AWS Request Handlers
- adapter는 몇가지 일반적인 request handler를 갖고 있습니다.
가장 일반적인 것은 AWS의 RequestStreamHandler의 구현인 org.springframework.cloud.function.adapter.aws.FunctionInvoker입니다.
사용자는 AWS 대시보드에 함수를 배포할때 handler를 지정하는 것외에 다른 어떤것도 할 필요가 없습니다.
Function 유형의 다른 @Bean을 가지고 있다면, spring.cloud.function.definition 속성 혹은 환경 변수를 구성하여 사용할
한가지를 선택할 수 있습니다.
함수들은 Spring Cloud FunctionCatalog로 부터 추출됩니다.
spring.cloud.function.definition을 지정한 경우에는 프레임워크는 처음으로 Funtion 그다음 Consumer 그리고 마지막으로 Supplier
에 대해 검색 순서에 따라 기본값을 찾으려고 시도할 것입니다.

>https://docs.spring.io/spring-cloud-function/docs/4.0.5/reference/html/spring-cloud-function.html#_function_routing_and_filtering
>https://github.com/spring-cloud/spring-cloud-function/tree/main/spring-cloud-function-samples/function-sample-aws-routing
# AWS Function Routing
- Spring Colud Function의 핵심 특징 중 하나는 routing이다.
사용자가 제공한 라우팅 명령에 기반하여 다른 함수에 위임할 수 있는 하나의 특수 함수를 갖는 기능.
단일 함수 (라우팅 함수)를 AWS Lambda로 바인딩 할 수 있으므로, API Gateway를 위한 단일 HTTP endpoint에 바인딩 할 수 있다.
따라서 결국 어플리케이션의 일부가 될 수 있는 많은 함수로 부터 이점을 얻는 동안에도 하나의 함수와 하나의 엔드포인트만 관리하면 된다.

어플리케이션 내에 하나 이상의 함수가 존재하면 AWS Lambda로 바인딩 할 함수가 어떤 것인지 결정할 수 없으므로
라우팅 기능이 기본적으로 사용될 것이다. 따라서 RoutingFunction은 기본이 된다.
이것이 의미하는 바는 여러 메커니즘을 사용하여 할 수 있는 라우팅 명령을 제공해야 할 필요가 있다는 것입니다.

또한, AWS는 환경 변수 이름에 .(dots) 혹은 -(hyphens)을 허용하지 않는 다는 것을 알아야합니다.
boot로 부터 지원을 받아 간단하게 .(dots) 대신 _(underscorers) 와 -(hyphens), 카멜 케이스 사용할 수 있습니다.
예를들어
spring.cloud.function.definition > spring_cloud_function_definition
spring.cloud.function.routing-expression > spring_cloud_function_routingExpression.

> https://docs.spring.io/spring-cloud-function/docs/current/reference/html/aws.html#_custom_runtime
# AWS Function Routing with Custom Runtime
Custom Runtime Function Routing을 사용할때 동일한 방법으로 작동합니다.
함수 이름을 handler로 사용하는 것과 동일한 방법으로 AWS Handler로 functionRouter를 지정할 필요가 있습니다.

참고
https://www.baeldung.com/spring-cloud-function




