
	# DynamoDB

	- Key
		1. 구성 방법
			(1) Simple Primary Key
			- Partition Key 하나만을 Primary Key로 쓴다.
			(2) Composite Primary Key
			- Partition Key 와 Sort Key의 조합으로 Primary Key로 쓴다.
	- 데이터 핸들링
		# 데이터를 처리할 수 있는 방식.
		1. Item-based actions
			- Item은 관계형 데이터베이스로 치면 Row에 해당한다.
			- Write, Delete, Update가 가능하다.
			- 하나의 Item을 대상으로 처리 하는 것이기 때문에, 액션을 하기 위해서는 Primary Key를 제공해야 한다.
				> '한번에 여러 개를 처리 할 수 없다'는 의미이기도 하다 (batch request가 안된다는 뜻)
			
			예) 	영화 배우 정보 (배우, 영화 제목, 배우의 역할, 개봉 연도, 장르) 테이블이 있다.
				Partition Key는 톰행크스, Sort Key는 톰 행크스가 출연한 영화라고 했을 때, 
				"톰행크스가 출연한 모든 영화 삭제해줘" 이런 요청은 불가능 하다는 것이다.
				아이템 하나하나 처리 해야한다.
			
			|		Primary Key			|		Attributes			|
			|	Actor(PARTITION)  |	Movie (SORT) 	|						|
			|	Tom Hanks	  |	Cast Away	| Role			Year	Genre		|
			|			  |			| Chuck Noland		2000	Drama		|
			|	Tom Hanks	  |	Toy Story	| Role			Year	Genre		|
			|			  |			| Woody			1995	Children's	|
			| 	Tim Allen	  |	Toy Story	| Role			Year	Genre		|
			|			  |			| Buzz Lightyear	1995	Children's	|

		2. Query
			- 데이터를 읽기 위한 액션, Read-only action
			- 한번의 요청으로 여러 개의 아이템을 처리(fetch) 할 수 있다.	
				> '톰 행크스가 출연한 모든 영화 가져와줘' 라고 요청 하는게 가능하다.
			- Partition Key를 제공하는 것은 기본인데, 필요에 따라, Sort Key에다가 세부 조건을 적용 할 수 있다.
				> '톰 행크스의 모든 영화를 가져와줘'라고 할 수도 있지만, '톰 행크스의 영화 중에, 
				  알파벳 a~c안에 드는 글자로 시작하는 영화만 가져와줘'할 수도 있는 것이다.

			|		Primary Key			|		Attributes			|
			|	Actor(PARTITION)  |	Movie (SORT) 	|						|
			|	Tom Hanks	  |	Cast Away	| Role			Year	Genre		|
			|			  |			| Chuck Noland		2000	Drama		|
			|	Tom Hanks	  |	Toy Story	| Role			Year	Genre		|
			|			  |			| Woody			1995	Children's	|
			| 	Tim Allen	  |	Toy Story	| Role			Year	Genre		|
			|			  |			| Buzz Lightyear	1995	Children's	|
		
		3. Scan
			- 관계형 데이터베이스의 스캔과 동일하며, 모든 아이템들을 다보는 기능이다.		
			
			|		Primary Key			|		Attributes			|
			|	Actor(PARTITION)  |	Movie (SORT) 	|						|
			|	Tom Hanks	  |	Cast Away	| Role			Year	Genre		|
			|			  |			| Chuck Noland		2000	Drama		|
			|	Tom Hanks	  |	Toy Story	| Role			Year	Genre		|
			|			  |			| Woody			1995	Children's	|
			| 	Tim Allen	  |	Toy Story	| Role			Year	Genre		|
			|			  |			| Buzz Lightyear	1995	Children's	|
	- Secondary Indexes.
		> 테이블에 액세스하는 다섯가지의 액세스 패턴이 있다고 했을 때,
		Primary Key (Partition Key only 혹은 Partition Key + Sort Key)를 이용해서, 두가지는 만족,
		나머지 세가지의 패턴에 대해서 만들 수 있는 기능이 바로, Secondary Indexes이다.
		
		- 'Toy Story에 출연한 배우들을 보여줘'라는 액세스 패턴이 추가 될때, Query로는 불가능 하다.
			> Global Secondary Index(GSI)를 적용 한다.
			Sort Key 내용을 GSI의 Partition Key로하고, Partition Key 내용을 GSI의 Srot Key로 하면 가능하다.
		- Secondary Index를 적용하면, 그 형태에 맞는 Primary Key의 새로운 테이블(replicated)이 내부적으로 생성된다고 보면된다.
		- 테이블을 직접관리할 필요는 없고, 사용자가 데이터를 추가 혹은 삭제, 수정 한 경우 내부적으로 Secondary Index 적용으로 만들어진 테이블에 같이 적용 된다.
	
			|		Primary Key			|		Attributes			|
			|	Actor(PARTITION)  |	Movie (SORT) 	|						|
			|	Tom Hanks	  |	Cast Away	| Role			Year	Genre		|
			|			  |			| Chuck Noland		2000	Drama		|
			|	Tom Hanks	  |	Toy Story	| Role			Year	Genre		|
			|			  |			| Woody			1995	Children's	|
			| 	Tim Allen	  |	Toy Story	| Role			Year	Genre		|
			|			  |			| Buzz Lightyear	1995	Children's	|

			### GSI 적용				
			|		GSI(MoviesActorsIndex)		|		Attributes			|
			|	Movie(PARTITION)  |	Actor(SORT) 	|						|
			|	Cast Away	  |	Tom Hanks	| Role			Year	Genre		|
			|			  |			| Chuck Noland		2000	Drama		|
			|	Toy Story	  |	Tom Hanks	| Role			Year	Genre		|
			|			  |			| Woody			1995	Children's	|
			| 	Toy Story	  |	Tim Allen	| Role			Year	Genre		|
			|			  |			| Buzz Lightyear	1995	Children's	|

	- 데이터 모델링
		1. ERD 만들기
			- 애플리케이션에 필요한 Entity와 Entity들 간의 관계 정의.
			- 1:1 관계, 1:N 관계 모두 표현하기.
			- 관계형 데이터베이스와 다르지 않다.
		2. 접근 패턴 정의
			- 애플리케이션의 요구사항 정의.
			- 정의에 따라 데이터베이스에 어떤 데이터를 넣고, 데이터베이스로 부터 어떤 데이터를 읽는지 등등 작성해야함.
			- '톰 행크스의 모든 영화를 가져와줘', 'Toy Story에 출연한 배우들을 보여줘'와 같은 액세스 패턴.
		3. Primary Keys와 Secondary Indexes 디자인
			- 위 도출 내용을 바탕으로 Write / Delete / Modify에 대한 처리가 가능하면서도, Scan이 아닌 Query로 데이터를 얻고,
			 필터링 할 수 있도록 Key를 디자인 해야한다.

	- DaynamoDB 작업시 중요 부분.
		1. Normalization
			- 관계형 데이터베이스에서 중복 데이터를 없애주기 위해 썻던 정규화 (Normalization)는 DynamoDB에 적용하기 어렵다.
			- DynamoDB는 Join 개념이 없고, 애플리케이션 레벨에서 구현한다 하더라도 매우 비효율적이다.
			- DynamoDB는 De-normalization 하다.
		2. Join
			- NoSQL 특징을 가진 데이터베이스는 불가능하다고 보면된다. 대용량 데이터 상황에서 특히 비용이 비싸다.
		3. One entity type per table
			- 관계형 데이터베이스는 Entity의 종류나 특성에 따라 테이블을 모두 나눈다. ...'영화'...'배우'...
			- DynamoDB에서는 모두 하나의 테이블에 표현 할 수 있다.
			- 하나의 테이블에 표현했을 때, Query 성능이 극대화 된다.

	- 모델링 해보기.
		예시 상황)
			(1) 애플리케이션은 E-commerce 서비스 이다.
			(2) 사용자들이 주문을 할 수 있다.
			(3) 하나의 주문은 여러개의 아이템을 가질 수 있다.

		1. ERD 만들기
			- User : User Address = 1:N
			- User : Order = 1:N
			- Order : Item = 1:N
		
		2. 접근 패턴 정의
			- 사용자(User)의 프로파일을 가져온다.
			- 사용자의 모든 주문(Order)을 가져온다.
			- 하나의 주문과 그 주문의 아이템들을 가져온다. (Item)
			- 한 사용자의 특정 상태 (Status)의 주문을 가져온다.
			- 사용자의 새로운 주문을 가져온다.
		
		3. Primary Key & Secondary Indexes 디자인
			- 1:1 관계와 1:N 관계를 나누어 표현하자.
			[1:1 관계]
			'사용자의 프로파일' 은 '사용자'에 종속적인 개념으로, 사용자가 Primary Key(PK)
			프로파일이 Sort Key(SK) 관계로 표현될 수 있다.
			> 각 Key 앞에 'USER#', 'PROFILE#' 같은 방식으로, 어떤 내용의 Key인지 Prefix를 붙여 주면, 디버깅하기 좋고, 값이 중복될 가능성이 낮아 진다.
			 
			|		Primary Key					|		Attributes						|
			|	PK			|	SK			|									|
			|	USER#alexdebrie		|	#PROFILE#alexdebrie	| Username	FullName	Email			CreatedAt	|
			|				|				| alexdebrie	Alex DeBrie	alexdebrie1@gmail.com	2018-03-23	|
			|	USER#nedstark		|	#PROFILE#nedstark	| Username	FullName	Email			CreatedAt	|
			|				|				| nedstark	Eddard Stark	lord@winterfell.com	2016-02-27	|
			

			[1:N 관계]
			1:N 관계를 표현하는 방법 3가지
			(1) Attribute (list or map)
			(2) Primary key + Query
			(3) Secondary index + Query
			
			(1) Attriute (list or map)
			'사용자'와 '사용자 주소' 관계
			1 - 주소를 접근할 작업이 있는가? 주소로 사용자 역검색 시나리오는?
			2 - 정책적인 사유로 사용자 주소 개수 제한. '사용자'와 '사용자 주소' 관계의 표현은 list나 map을 활용한 de-normalization을 적용할 수있다.

	|		Primary Key					|		Attributes												|
	|	PK			|	SK			|															|
	|	USER#alexdebrie		|	#PROFILE#alexdebrie	| Username	FullName	Email			CreatedAt	Adresses					|
	|				|				| alexdebrie	Alex DeBrie	alexdebrie1@gmail.com	2018-03-23	{						|
	|				|				|										"Home":{				|
	|				|				|										    "StreetAddress":"111 1st St",	|
	|				|				|										    "Stable":"Nebraska",		|
	|				|				|										    "Country":"USA"			|
	|				|				|										}					|
	|				|				|									}						|
	|	USER#nedstark		|	#PROFILE#nedstark	| Username	FullName	Email			CreatedAt	Adresses					|
	|				|				| nedstark	Eddard Stark	lord@winterfell.com	2016-02-27	{						|
	|				|				|										"Home":{				|
	|				|				|										    "StreetAdress":"1234 2nd Ave",	|
	|				|				|										    "City:"Winterfell",			|
	|				|				|										    "County":"Westeros"			|
	|				|				|										},					|
	|				|				|										"Business":{				|
	|				|				|										    "StreetAddress":"Suite 200,RedKeep",|
	|				|				|										    "City":"King's Landing",		|
	|				|				|										    "County":"Westeros"			|
	|				|				|										}					|
	|				|				|									}						|

			(2) Primary key + Query
			Sory Key를 이용
			'사용자'와 '주문' 관계가 1:N의 관계에 있고, 사용자의 '주문' 개수가 제한적이지 않은 상황일 경우.
			# Order의 Attribute는 Profile과 다르다는 것을 알 수 있다. DynamoDB에서는 Attribute들을 Key의 내용에 따라 자유롭게 구성 할 수 있다. 
	
	|		Primary Key					|		Attributes												|
	|	PK			|	SK			|															|
	|	USER#alexdebrie		|	#PROFILE#alexdebrie	| Username	FullName	Email			CreatedAt	Adresses					|
	|				|				| alexdebrie	Alex DeBrie	alexdebrie1@gmail.com	2018-03-23	{						|
	|				|				|										"Home":{				|
	|				|				|										    "StreetAddress":"111 1st St",	|
	|				|				|										    "Stable":"Nebraska",		|
	|				|				|										    "Country":"USA"			|
	|				|				|										}					|
	|				|				|									}						|
	|				|	ORDER#5e7272b7		| Username	OrderId		Status			CreatedAt	Addresses					|
	|				|				| alexdebrie	5e727b7		PLACED			2019-04-21	{"StreetAddress":"111 1st St", "Stable":"Nebrask|
	|				|	ORDER#2e7abecc		| Username	OrderId		Status			CreatedAt	Addresses					|
	|				|				| alexdebrie	2e7abecc	SHIPPED			2019-04-21	{"StreetAddress":"111 1st St", "Stable":"Nebrask|
	|	USER#nedstark		|	#PROFILE#nedstark	| Username	FullName	Email			CreatedAt	Adresses					|
	|				|				| nedstark	Eddard Stark	lord@winterfell.com	2016-02-27	{						|
	|				|				|									  	"Home":{				|
	|				|				|										    "StreetAdress":"1234 2nd Ave",	|
	|				|				|									    	    "City:"Winterfell",			|
	|				|				|									    	    "County":"Westeros"			|
	|				|				|										}					|
	|				|				|									}

			(3) Secondary index + Query
			Secondary index를 이용
			'주문'과 '아이템'의 1:N 관게를 표현하기 위해, Secondary index로 PK = '아이템', SK = '주문'을 적용 할 수 있다.
		
	|		Primary Key					|		Attributes												|
	|	PK			|	SK			|															|
	|	USER#alexdebrie		|	#PROFILE#alexdebrie	| Username	FullName	Email			CreatedAt	Adresses					|
	|				|				| alexdebrie	Alex DeBrie	alexdebrie1@gmail.com	2018-03-23	{						|
	|				|				|										"Home":{				|
	|				|				|										    "StreetAddress":"111 1st St",	|
	|				|				|										    "Stable":"Nebraska",		|
	|				|				|										    "Country":"USA"			|
	|				|				|										}					|
	|				|				|									}						|
	|				|	ORDER#5e7272b7		| Username	OrderId		Status			CreatedAt	Addresses					|
	|				|				| alexdebrie	5e727b7		PLACED			2019-04-21	{"StreetAddress":"111 1st St", "Stable":"Nebrask|
	|				|	ORDER#2e7abecc		| Username	OrderId		Status			CreatedAt	Addresses					|
	|				|				| alexdebrie	2e7abecc	SHIPPED			2019-04-21	{"StreetAddress":"111 1st St", "Stable":"Nebrask|
	|	USER#nedstark		|	#PROFILE#nedstark	| Username	FullName	Email			CreatedAt	Adresses					|
	|				|				| nedstark	Eddard Stark	lord@winterfell.com	2016-02-27	{						|
	|				|				|									  	"Home":{				|
	|				|				|										    "StreetAdress":"1234 2nd Ave",	|
	|				|				|									    	    "City:"Winterfell",			|
	|				|				|									    	    "County":"Westeros"			|
	|				|				|										}					|
	|				|				|									}						|
	|	ITEM#ab070628		|	ORDER#5e7272b7		| ItemId	OrderId		ProductName	Price	Status								|
	|				|				| ab070628	53727b7		Amazon Echo	59.99	FILLED								|
	|	ITEM#e16f4906		|	ORDER#2e7abecc		| ItemId	OrderId		ProductName	Price	Status								|
	|				|				| e16f4906	2e7abecc	Duct tape	5.99	FILLED								|

			일반적으로 '주문' 하나에, '아이템' 여러개이므로, PK = '주문', SK = '아이템'으로 할 것 같지만,
			'주문'을 SK로 하면, 서로 다른 Partition Key (User, Item)이 공통의 Sort Key(Order)를 가질 수 있는 형태가 되기 때문이다.
			지금의 구조에서 GSI로 SK에 PK를 적용하고, PK에 SK를 적용하면 PK,SK가 뒤집힌 Inverted Index 형태가 된다.
			
			Secondary Index의 PK인 '주문'을 이용하여 Query를 하면, '사용자'와 '아이템'들이 함께 나온다.
			두 개의 테이블이 Join된 결과와 같다.
			하나의 테이블 안에서 PK, SK Secondary index를 이용해서 Pre-aggregated된 내용을 Join 없이 고성능으로 얻을 수 있는 것이다.

	- Filtering
		Partition Key가 서로 다르다면 (서로 다른 파티션에 데이터가 저장된다면) Scan 후 Filtering을 적용하는 것도 하나의 방법 일 수 있지만, Scan은 좋은 방법이 아니다.
	 	
		# DynamoDB의 Filter expression 동작 방식
			1. 테이블에서 데이터(아이템)을 읽는다.
			2. 아이템들을 메모리에 로드하고 나면, DynamoDB는 사용자가 정의한 Filter expression이 있는지 확인한다.
			3. Filter expression이 있다면, 그 내용에 따라 필터링 한다.
			4. 반환 한다.
		
			문제는 1번이다. DynamoDB에서 가져올 수 있는 데이터는 한번에 최대 1MB이다.
			1GB 테이블이 있을때, Scna을 한다면 요청을 처리하기 위해 요청을 1000번은 보낼 것이다.
			Filter expression을 믿고 Scan을 하는 행위는 하지 말자.
			대신 필터링 된 데이터를 Primary Key나 Secondary index를 통해 가져오도록 구성 하자.

			필터링 액세스 패턴을 Key나 Index를 통해 가져올 수 있도록 하는 구성 세가지.
			1. Primary Key
			2. Composite sort key
			3. Sparse index
			
			필터링이 적용되어야하는 액세스 패턴 예시)
			1. 사용자의 모든 주문(order)을 가져온다.
			2. 한 사용자의 특정 상태(status)의 주문을 가져온다.
			3. 사용자의 새로운 주문을 가져온다.

		1. 사용자의 모든 주문(order)을 가져온다. > Primary Key 방법 적용
		ex) sql > SELECT * FROM orders WHERE username = 'alexdebrie'
		ex) DynamoDB (Primary Key의 구성에 따라, PK = '사용자', SK = '주문'으로 필터링 할 수 있다.
			> PK=USER#alexdebrie AND BEGINS_WITH(SK, 'ORDER#')

		2. 한 사용자의 특정 상태(status)의 주문을 가져온다. > Composite Sort Key 방법 적용
		ex) sql > SELECT * FROM orders WHERE username = 'alexdebrie' AND status = 'shipped'
			테이블 형태로는 "status" attribute에 해당하는 내용은 Primary Key나 Secondary index를 통해서 접근 할 수 없다.
			또한 가져오고자 하는 내용이 서로 다른 Partition Key에 속해 있어, Primary Key나 Secondary index를 통해 가져온 데이터에 Filter expression을 적용하는 것도 불가능 하다.
		- Composite Sort Key 적용
		# 기존의 두개 (혹은 그 이상)의 attribute를 합치고, 그것을 Global Secondary Index(GSI)를 통해 Sort key로 적용하면 된다.

			(1) Status와 CreatedAt을 합쳐서 OrderStatusDate attribute를 추가.
			(2) GSI를 이용해, OrderStatusDate를 SK로 적용.
			
			> PK=USER#alexdebrie AND BEGINS_WITH(OrderStatusDate, 'Shipped#')
			CreateAt속성을 Composite Key로 만들어 줌으로 써, "날짜"까지 필터링의 조건으로 넣을 수 있게되었다.
			
		3. 사용자의 새로운 주문을 가져온다. > Spare Key 방법 적용
		es) sql > SELECT * FROM orders WHERE status = 'placed'
			기존의 PK, SK와 관계 없이, 특정 attribute 값을 기준으로 아이템을 필터링 해서 얻고 싶은 경우이다.
			해당 attribute의 값에 대한 ID를 만들고, 그 ID에 대해서 GSI를 적용 하면 된다.
			Status가 'PLACED'에 해당하는 아이템은 테이블 전체 중 일부이고, 이것에 대한 Key를 만든다 해서 Sparse Key라고 하는 것이다.
			Status가 'PLACED'인 경우만 뽑고 싶다면, PlaceId라는 attribute를 생성하고, GSI를 통해 PK로 적용될 수 있도록 Unique한 값을 넣어주자.
			GSI 테이블은, 원본 테이블의 Subset이며, '특정 attribute'에 대한 '특정값'을 대상으로 만들어진 것이기 때문에, 그 사이즈 자체가 크지 않을 것으로 기대할 수 있다.
			그래서 해당 Index를 대상으로 Scan을 수행하는 것도 용인 된다.				


	== AWS Document 관련 정리
		# DynamoDB 핵심 구성 요소
			- 테이블, 항목 및 속성
				* 테이블 > 다른 데이터베이스 시스템과 같이 데이터를 테이블에 저장 합니다.
					테이블은 데이터의 집합입니다.
				* 항목 > 각 테이블에는 0개 이상의 항목이 있습니다. 항목은 모든 기타 항목 중에서 고유하게 식별 할 수 있는 속성들의 집합니다.
					People 테이블에서 각 항목은 한사람을 나타냅니다. DynamoDB의 항목은 여러 가지 면에서 다른 데이터베이스 시스템의 행, 레코드 또는 튜플과 유사합니다.
					DynamoDB에서는 테이블에 저장할 수 있는 항목의 수에 제한이 없습니다.
				* 속성 > 각 항목은 하나 이상의 속성으로 구성됩니다. 속성은 기본적인 데이터 요소로서 더 이상 나뉠 필요가 없는 것 입니다.
					People 테이블의 PersonID, LastName, FirstName등 속성이 있습니다. Department 테이블의 경우 항목에 DepartmentID, Name, Manager
					등의 속성이 있을 수 있습니다. DynamoDB의 속성은 여러 가지 면에서 다른 데이터베이스 시스템의 필드 또는 열과 유사합니다.
				People 테이블 이미지
				https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/images/HowItWorksPeople.png
				
				* 테이블의 각 항목에는 항목을 테이블의 다른 모든 항목과 구별해 주는 고유 식별자인 기본 키가 있습니다. People 테이블에서 기본 키는 한 개의 속성(PersonID)으로 구성 됩니다.
				* 기본 키를 제외하고, People 테이블에는 스키마가 없습니다. 이는 속성이나 데이터 형식을 미리 정의할 필요가 없음을 의미합니다.
					각 항목에는 자체의 고유 속성이 있을 수 있습니다.
				* 대부분의 속성은 스칼라인데, 이는 하나의 값만 가질 수 있다는 의미입니다. 문자열 및 숫자가 스칼라의 일반적인 예입니다.
				* 일부 항목에는 중첩된 속성(Address)이 있습니다. DynamoDB는 최대 32개 깊이 수준까지 중첩된 속성을 지원합니다.

				Music 테이블 이미지
				https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/images/HowItWorksMusic.png
				
				* Music의 기본 키는 두 개의 속성(Artist 및 SongTitle)으로 구성 되어 있습니다. 테이블의 각 항목이 이러한 두 속성을 가지고 있어야 합니다. Artist와 SongTitle의 조합은						테이블의 각 항목을 다른 모든 항목과 구별해 줍니다.
				* 기본 키를 제외하고, Music 테이블에는 스키마가 없습니다. 이는 속성이나 데이터 형식을 미리 정의할 필요가 없음을 의미합니다. 각 항목에는 자체의 고유
					속성이 있을 수 있습니다.
				* 항목 중 하나에 중첩된 속성(PromotionInfo)이 있는데, 이 속성에 다른 중첩된 속성이 포함되어 있습니다. DynamoDB는 최대 32개 깊이 수준까지 중첩된 속성을 지원합니다.

		# 기본 키
			테이블을 생성할 떄는 테이블 이름 외에도 테이블의 기본 키를 지정해야 합니다. 기본 키는 테이블의 각 항목을 나타내는 고유 식별자 입니다.
			따라서 두 항목이 동일한 키를 가질 수는 없습니다.
			- DynamoDB는 두 가지의 기본 키를 지원합니다.
				* 파티션 키 (PK) - 파티션 키로 알려진 하나의 속성으로 구성되는 단순 기본키
					DynamoDB는 내부 해시 함수에 대한 입력으로 파티션 키 값을 사용합니다. 해시 함수 출력에 따라 항목을 저장할 파티션(DynamoDB 내부의 물리적 스토리지)이 결정
					됩니다. 파티션키로만 구성되어 있는 테이블에서는 어떤 두 개의 테이블 항목도 동일한 파티션 키 값을 가질 수 없습니다.
					People 테이블은 단순 기본 키(PersonID)를 사용하는 테이블의 예입니다. People 테이블의 모든 항목은 해당 항목의 PersonId값을 제공하여 직접 액세스할 수 있습니다.
				* 파티션 키 및 정렬 키 (PK & SK) - 복합 기본 키로 지칭되는 이 형식의 키는 두 개의 속성으로 구성됩니다. 첫 번째 속성은 파티션 키이고, 두 번째 속성은 정렬 키 입니다.
					DynamoDB는 내부 해시 함수에 대한 입력으로 파티션 키 값을 사용합니다. 해시 함수 출력에 따라 항목을 저장할 파티션(DynamoDB 내부의 물리적 스토리지)이 결정
					됩니다. 파티션 키 값이 동일한 모든 항목은 정렬 키 값을 기준으로 정렬되어 함께 저장됩니다.
					파티션 키와 정렬 키로 구성되어 있는 테이블에서는 여러 항목이 동일한 파티션 키 값을 가질 수 있습니다. 아이템의 정렬 키 값은 달라야 합니다.
					Music 테이블은 복합 기본 키(Artist 및 SongTitle)를 사용하는 테이블의 예입니다.
					Music 테이블의 모든 항목은 해당 항목의 Artist 및 SongTitle 값을 제공하는 경우 직접 액세스할 수 있습니다.
					복합 기본 키를 사용하면 보다 유연하게 데이터를 쿼리할 수 있습니다. 예를 들어, Artist 값만 제공하는 경우, DynamoDB는 해당 아티스트의 모든 노래를 검색합니다.
					Artist 값과 함께 SongTitle 값 범위를 입력하여 특정 아티스트의 노래 중 일부만 검색할 수도 있습니다.
			### 참고
				항목의 파티션 키를 해시 속성이라고도 합니다. 해시 속성이라는 용어는 파티션 키값에 따라 파티션에 데이터 항목을 고르게 분산하는 DynamoDB의 내부 해시 함수를 사용하는 것
				에서 유래합니다.
				항목의 정렬 키를 범위 속성이라고도 합니다. 범위 속성이라는 용어는 DynamoDB가 파티션 키가 동일한 항목을 정렬 키 값을 기준으로 정렬된 순서로 물리적으로 서로 가깝게 저장
				하는 방식에서 유래합니다.
			각 기본 키 속성은 스칼라여야 합니다. (즉, 단일 값만 가질 수 있음). 기본 키 속성에 허용되는 데이터 형식은 문자열, 숫자 또는 이진수뿐입니다. 다른 키가 아닌 속성에는 이러한 제한이
			없습니다.

		# 보조 인덱스
			테이블에서 하나 이상의 보조 인덱스를 생성할 수 있습니다. 보조 인덱스를 사용하면 기본 키에 대한 쿼리는 물론이고 대체 키를 사용하여 테이블의 데이터도 쿼리할 수 있습니다.
			인덱스를 사용하면 데이터를 쿼리할 때 애플리케이션에 보다 많은 유연성을 제공합니다.
				1) 글로벌 보조 인덱스(GSI) - 파티션 키 및 정렬 키가 테이블과 다를 수 있는 인덱스.
				2) 로컬 보조 인덱스 (LSI) - 기본 테이블과 파티션 키는 동일하지만 정렬 키가 다른 인덱스.
			DynamoDB의 각 테이블에는 글로벌 보조 인덱스 20개(기본 할당량)와 로컬 보조 인덱스 5개의 할당량이 있습니다.
			
			Music 테이블에서 Genre 및 AlbumTitle로도 데이터를 쿼리하고 싶다면, 해당 속성에 대해 인덱스를 생성한 후 Music테이블 쿼리한 방법대로 인덱스 쿼리 하면 됩니다.
			https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/images/HowItWorksGenreAlbumTitle.png

			GenreAlbumTitle 테이블
				* 모든 인덱스는 테이블에 속해 있는데, 이를 인덱스의 기본 테이블이라고 합니다. Music은 GenreAlbumTitle 인덱스의 기본 테이블입니다.
				* DynamoDB는 인덱스를 자동으로 유지 관리합니다. 기본 테이블의 항목을 추가, 업데이트 또는 삭제하면 DynamoDB는 해당 테이블에 속하는 모든 인덱스에서 해당 항목을 추가,
				업데이트 또는 삭제합니다.
				* 인덱스를 생성할 때는 기본 테이블에서 인덱스로 복사하거나 프로젝션할 속성을 지정합니다. 적어도 DynamoDB는 기본 테이블의 키 속성을 인덱스로 프로젝션합니다.
				GenreAlbumTitle의 경우가 그러한데, Music 테이블의 키 속성만 인덱스로 프로젝션합니다.

		# DynamoDB Streams
			DynamoDB Streams는 DynamoDB 테이블의 데이터 수정 이벤트를 캡처하는 선택적 기능입니다. 이벤트 데이터는 발생한 순서대로 거의 실시간으로 스트림에 표시됩니다.
			각 이벤트는 스트림 레코드에 나타납니다. 테이블에서 스트림을 활성화하면 이벤트 중 하나가 발생할 때마다 DynamoDB Streams가 스트림 레코드를 기록합니다.
				* 테이블에 새로운 항목이 추가되면 스트림이 해당 속성을 모두 포함하여 전체 항목의 이미지를 캡처합니다.
				* 항목이 업데이트되면 스트림이 항목에서 수정된 속성의 '사전' 및 '사후' 이미지를 캡처합니다.
				* 테이블에서 항목이 삭제되면 스트림이 항목이 삭제되기 전에 전체 항목의 이미지를 캡처합니다.
			
			각 스트림 레코드에는 테이블의 이름, 이텐트 타임스탬프 및 다른 메타데이터가 포함되어 있습니다. 스트림 레코드의 수명은 24시간이며, 24시간이 지나면 스트림에서 자동으로 제거
			됩니다.

			DynamoDB Streams를 AWS Lambda와 함께 사용하면 트리거, 관심 있는 이벤트가 스트림에 나타날 때마다 자동으로 실행되는 코드를 생성할 수 있습니다.
			회사의 고객정보가 들어 있는 Customers 테이블에서 새 고객마다 '환영' 이메일을 보내려고 한다고 가정해 보십시오. 테이블에 스트림을 활성화한 다음, 스트림을 Lambda함수와 연결
			할 수 있습니다. Lambda 함수는 새로운 스트림 레코드가 표시될 때마다 실행되지만, Customers 테이블에 추가된 새로운 항목만 처리합니다. EmailAddress 속성이 있는 모든 항목에 대해
			Lambda함수는 Amazon Simple Email Service(Amazon SES)를 호출하여 해당 주소에 이메일을 보냅니다.

			# 스트림 + Lambda + SES 구성도
			https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/images/HowItWorksStreams.png

			### 참고
			EmailAddress가 없으면 이메일을 받지 못합니다.
			
			트리거뿐만 아니라 DynamoDB Streams는 AWS 리전 내나 리전 간의 데이터 복제, DynamoDB테이블의 구체화된 데이터 보기, Kinesis 구체화된 보기를 사용한 데이터 분석 등의 강력한 솔루션
			을 지원합니다.

		# 이름 지정 규칙
			이름은 의미 있고 간결해야 합니다. ex) Products, Books, Authors
				* 모든 이름은 UTF-8로 인코딩되어야 하며, 대소문자를 구분합니다.
				* 테이블 이름 및 인덱스 이름은 3~255자이고, 다음 문자만 포함할 수 있습니다.
					* a-z
					* A-Z
					* 0-9
					* _ (밑줄)
					* - (대시)	
					* . (점)
				* 속성 이름은 1자 이상이어야 하며 64KB를 초과할 수 없습니다.
				예외사항) 이 속성들은 255자 이내여야한다.
					* 보조 인덱스 파티션 키 이름
					* 보조 인덱스 정렬 키 이름
					* 사용자 지정 프로젝션 속성 이름(로컬 보조 인덱스에만 적용 가능)
		# 예약어 및 특수 문자
			https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/ReservedWords.html - 예약어
			#(해시) 및 :(콜론)은 특별한 의미를 갖습니다.
			https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/Expressions.ExpressionAttributeNames.html - 표현식 속성 이름
			DynamoDB에서 예약어 및 특수 문자를 이름에 사용하도록 허용하는 경우에도 표현식에서 이러한 이름을 사용할 때마다 자리 표시자 변수를 정의해야 하므로 사용하지 않는 것이 좋습니다.
			
		# 데이터 유형
			* 스칼라 형식 - 스칼라 형식은 하나의 값만 표현할 수 있습니다. 스칼라 형식은 숫자, 문자열, 이진수, 부울 및 Null입니다.
			* 문서 형식 - 문서 형식은 중첩된 속성이 있는 복잡한 구조를 표현할 수 있습니다. 이러한 형식은 JSON 문서에서 찾을 수 있습니다. 문서 형식은 목록 및 맵입니다.
			* 집합 형식 - 집합 형식은 여러 스칼라 값을 표현할 수 있습니다. 집합 형식은 문자열 집합, 숫자 집합 및 이진수 집합입니다.

			테이블이나 보조 인덱스를 생성할 때는 각 기본 키 속성(파티션 키 및 정렬 키)의이름 및 데이터 형식을 지정해야 합니다.
			각 기본 키 속성은 문자열, 숫자 또는 이진수 형식으로 정의해야 합니다.

			# 스칼라 형식
			스칼라 형식은 숫자, 문자열, 이진수, 부울 및 Null입니다.

			# 숫자
			번호는 양수, 음수 또는 0일 수 있습니다. 숫자는 최대 38자릿수까지 지원됩니다. 이 제한을 초과하면 예외가 발생합니다.
			- 양의 범위: 1E-130 ~ 9.9999999999999999999999999999999999999E+125
			- 음의 범위: -9.9999999999999999999999999999999999999E+125 ~ -1E-130
			
			DynamoDB에서 숫자는 가변 길이로 나타냅니다. 앞과 끝의 0은 잘립니다.
			모든 숫자는 언어와 라이브러리 간의 호환성을 극대화하기 위해 네트워크를 통해 DynamoDB에 문자열로 전송됩니다. 하지만 DynamoDB는 해당 문자열을 연산 작업에서 숫자 형식 속성으로
			처리합니다.
			### 참고
			숫자 정밀도가 중요한 경우에는 숫자 형식에서 변환된 문자열을 사용하여 숫자를 DynamoDB로 전달해야 합니다.

			번호 데이터 형식을 사용하면 날짜 또는 타임스탬프를 표현할 수 있습니다. 이렇게 하는 한 가지 방법은 1970년 1월 1일 00:00:00 UTC 이후 경과된 시간(초)인 epoch 시간을 사용하는
			것입니다. 예를들어, epoch 시간 1437136300은 2015년 7월 17일 오후 12:31:40 UTC를 나타냅니다.
			>> Unix time : http://en.wikipedia.org/wiki/Unix_time

			# 문자열
			문자열은 UTF-8 이진수 인코딩을 사용하는 유니코드입니다. 속성이 인덱스 또는 테이블의 키로 사용되지 않고 최대 DynamoDB 항목 크기 제한인 400KB로 제한되는 경우 문자열의 최소 길이는
			0일 수 있습니다.
		
			문자열 형식으로 정의된 기본 키 속성에는 다음과 같은 제약이 추가로 적용됩니다.
			- 단순 기본 키의 경우 첫 번째 속성 값(파티션 키)의 최대 길이는 2048바이트입니다.
			- 복합 기본 키의 경우 두 번째 속성 값(정렬 키)의 최대 길이는 1024바이트이다.

			DynamoDB는 기본 UTF-8 문자열 인코딩의 바이트를 사용하여 문자열을 수집하고 비교합니다. 예를 들어 "a" (0x61)은 "A" (0x41)보다 크고, "¿" (0xC2BF)는 "z" (0x7A)보다 큽니다.
			
			문자열 데이터 형식을 사용하면 날짜 또는 타임스탬프를 표현할 수 있습니다. 다음 예에서와 같이 ISO8601 문자열을 사용하여 이러한 작업이 가능합니다.
			- 2016-02-15
			- 2015-12-21T17:42:34Z
			- 20150311T122706Z
			>> ISO_8601 http://en.wikipedia.org/wiki/ISO_8601
			### 참고
			기존 관계형 데이터베이스와 달리 DynamoDB는 기본적으로 날짜 및 시간 데이터 유형을 지원하지 않습니다. 대신 Unix epoch 시간을 사용하여 날짜 및 시간 데이터를 숫자 데이터유형으로
			저장하는 것이 유용할 수 있습니다.

			# 이진수
			이진수 형식의 속성에는 압축 텍스트, 암호화 데이터 또는 이미지 같은 모든 이진수 데이터가 저장될 수 있습니다. DynamoDB는 이진수 값을 비교할 때마다 이진수 데이터의 각 바이트를
			부호가 없는 것으로 처리합니다.

			속성이 인덱스 또는 테이블의 키로 사용되지 않고 최대 DynamoDB 항목 크기 제한인 400KB로 제한되는 경우 이진 속성의 길이는 0일 수 있습니다.
			
			이진수 형식 속성으로 기본 키 속성을 정의하는 경우 다음 추가 제약이 적용됩니다.
			- 단순 기본 키의 경우 첫 번째 속성 값(파티션 키)의 최대 길이는 2048바이트입니다.
			- 복합 기본 키의 경우 두 번째 속성 값(정렬 키)의 최대 길이는 1024바이트입니다.

			애플리케이션에서는 데이터를 DynamoDB로 보내기 전에 Base64 인코딩 형식으로 이진수 값을 인코딩해야합니다.
			DynamoDB가 이러한 값을 받아 데이터를 부호가 없는 바이트 배열로 디코딩하고 이진수 속성 길이로 사용합니다.
			
			base64 인코딩 텍스트로 사용하여 이진수 속성을 나타낸 예제
			dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk
			
			# 부울
			부울 형식의 속성은 true 또는 false를 저장할 수 있습니다.

			# Null
			Null은 알려지지 않았거나 정의되지 않은 상태의 속성을 나타냅니다.

			#문서 형식
			문석 형식은 목록 및 맵입니다. 이러한 데이터 형식은 서로 중첩이 가능하여 최대 32개 깊이 수준의 복잡한 데이터 구조까지 나타낼 수 있습니다.
			목록 또는 맵 내 값의 수에는 제한이 없습니다. 단, 값을 포함하는 항목이 DynamoDB 항목 크기 제한(400KB)을 초과하지 않아야 합니다.
			속성이 테이블 또는 인덱스 키에 사용되지 않는 경우 속성 값은 빈 문자열이거나 빈 이진 값일 수 있습니다. 속성 값은 빈 집합(문자열 집합, 숫자 집합 또는 이진 집합)일 수 없지만
			빈 목록 및 맵은 허용됩니다. 목록과 맵 내에서는 빈 문자열과 이진 값이 허용됩니다. 
			Attributes > https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/ServiceQuotas.html#limits-attributes
			
			# 목록
			목록 형식 속성은 순서가 지정된 값 모음을 저장할 수 있습니다. 목록은 대괄호([...])로 묶습니다.
			목록은 JSON 배열과 유사합니다. 목록 요소에 저장할 수 있는 데이터 형식에는 제한이 없으며, 한 목록 요소에 있는 요소의 형식이 달라도 상관없습니다.
			두 개의 문자열과 하나의 숫자를 포함하는 목록 예제입니다.
			FavoriteThings: ["Cookies", "Coffee", 3.14159]
			
			### 참고
			DynamoDB는 각 요소가 깊게 중첩되었다고 해도 목록 내의 개별 요소를 사용할 수 있습니다.
			> https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/Expressions.html
	
			# 맵
			맵 형식 속성은 정렬되지 않은 이름-값 페어의 모음을 저장할 수 있습니다. 맵은 중괄호({...})로 묶습니다.
			맵은 JSON 객체와 유사합니다. 맵 요소에 저장할 수 있는 데이터 형식에는 제한이 없으며, 한 맵에 형식이 다른 요소도 함께 있을 수 있습니다.
			맵은 DynamoDB에 JSON문서를 저장하는 데 이상적입니다. 다음은 문자열, 숫자 및 다른 맵을 포함하는 중첩 목록이 저장된 맵을 나타내는 예제입니다.
			{
 			   	Day: "Monday",
				UnreadEmails: 42,
    				ItemsOnMyDesk: [
        				"Coffee Cup",
        				"Telephone",
        				{
            					Pens: { Quantity : 3},
            					Pencils: { Quantity : 2},
            					Erasers: { Quantity : 1}
        				}
    				]
			}

			### 참고
			DynamoDB는 각 요소가 깊게 중첩되었다고 해도 맵 내의 개별 오소를 사용할 수 있습니다.
			> https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/Expressions.html

			# 집합
			DynamoDB에서도 숫자, 문자열 또는 이진수 값의 집합을 나타내는 형식을 지원합니다. 집합 내의 모든 요소의 형식은 동일해야합니다.
			예를 들어, 숫자 집합 형식의 속성은 숫자만 포함할 수 있으며, 문자열 집합은 문자열만 포함할 수 있는 식입니다.

			집합 내 값의 수에는 제한이 없습니다. 단, 값을 포함하는 항목이 DynamoDB 항목 크기 제한(400KB)을 초과하지 않아야 합니다.

			집합 내의 각 값은 고유해야 합니다. 집합 내 값의 순서는 유지되지 않습니다. 따라서 애플리케이션이 집합 내에서 요소가 특정 순서로 유지된다는 가정 하에 실행되지 않아야 합니다.
			DynamoDB는 빈 집합을 지원하지 않지만 집합 내에서 빈 문자열과 이진 값이 허용됩니다.

			하나의 문자열 집합, 하나의 숫자 집합과 이진 집합이 포함된 예제입니다.

			["Black", "Green", "Red"]

			[42.2, -19, 7.5, 3.14]

			["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

			
			# 읽기 정합성
			모든 AWS 리전은 가용 영역이라고 하는 여러 개의 고유한 위치로 구성됩니다. 각 가용 영역은 다른 가용 영역의 오류로부터 격리되어 있으며
			같은 리전의 다른 가용 영역에 경제적이고 지연 시간이 낮은 네트워크 연결을 제공합니다. 따라서 한 리전의 여러 가용 영역 간 빠른 데이터 복제가 가능합니다.

			애플리케이션에서 DynamoDB 테이블에 데이터를 쓰고 HTTP 200 응답(OK)을 받을 때 쓰기가 발생하며 지속됩니다. 보통 1초 이내 모든 스토리지 위치의 데이터가 일관성을 갖게 됩니다.
			
			DynamoDB에서는 최종적으로 일관된 읽기 및 강력히 일관된 읽기를 지원합니다.

			# 최종적 일관된 읽기
			DynamoDB 테이블에서 데이터를 읽을 때, 응답에 최근 완료된 쓰기 작업의 결과가 반영되지 않을 수 있습니다.
			응답에는 부실 데이터가 일부 포함될 수 있습니다. 잠시 후 읽기 요청을 반복하면 응답이 최신 데이터를 반환합니다.

			# 강력한 일관된 읽기(Strongly Consistent Read)
			강력히 일관된 읽기를 요청하면 DynamoDB는 성공한 모든 이전 쓰기 작업의 업데이트가 반영된 최신 데이터를 포함하는 응답을 반환합니다.
			하지만 이러한 일관성은 다음과 같은 몇가지 단점을 수반합니다.
			- 강력한 일관된 읽기(Strongly consistent read)는 네트워크 지연 또는 중단이 발생한 경우에 사용이 어려울 수 있습니다.
				이 경우 DynamoDB는 서버 오류(HTTP 500)를 반환할 수 있습니다.
			- 강력한 일관된 읽기는 최종적 일관된 읽기보다 지연 시간이 더 길 수도 있습니다.
			- 글로벌 보조 인덱스에서는 강력히 일관된 읽기가 지원되지 않습니다.
			- 강력한 일관된 읽기는 최종적 일관될 읽기보다 처리 용량을 더 많이 사용합니다.
			> https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html
			### 참고
			달리 지정하지 않는 한, DynamoDB는 최종적으로 일관된 읽기를 사용합니다. GetItem, Query 및 Scan과 같은 읽기 작업은 ConsistentRead 파라미터를 제공합니다.
			이 파라미터를 true로 설정하면 DynamoDB는 작업 중 강력히 일관된 읽기를 사용합니다.

			# 읽기/쓰기 용량 모드
			Amazon DynamoDB에는 
			
		




	@ reference
	https://alphahackerhan.tistory.com/39
	https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/Introduction.html
